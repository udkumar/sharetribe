- content_for :javascript do
  initialize_signup_form("#{I18n.locale}","#{t("people.new.username_is_in_use")}","#{t("people.new.username_is_invalid")}","#{email_not_accepted_message}", "#{t("people.new.invalid_invitation_code")}", #{@current_community.real_name_required?}, #{@current_community.join_with_invite_only?} );

= stylesheet_link_tag "popup.css"
= javascript_include_tag "http://code.jquery.com/jquery-1.11.1.min.js"
:javascript
  $(function(){

    var appendthis =  ("<div class='modal-overlay js-modal-close'></div>");

      $('#subscription_plan').click(function(e) {
        if($(this).is(':checked')) {
          $("body").append(appendthis);
          $(".modal-overlay").fadeTo(500, 0.7);
          //$(".js-modalbox").fadeIn(500);
          var modalBox = $(this).attr('data-modal-id');
          $('#'+modalBox).fadeIn($(this).data());
        }else {
          $("#person_subscription_plan_id").val('');
        }
        
      });


    $(".js-modal-close, .modal-overlay").click(function() {
        $(".modal-box, .modal-overlay").fadeOut(500, function() {
            $(".modal-overlay").remove();
        });

    });

    $(window).resize(function() {
        $(".modal-box").css({
            top: ($(window).height() - $(".modal-box").outerHeight()) / 2,
            left: ($(window).width() - $(".modal-box").outerWidth()) / 2
        });
    });
    $(window).resize();

    $(".plan-select").click(function(){
      $("#person_subscription_plan_id").val($(this).data('plan'));
      $(".modal-box, .modal-overlay").fadeOut(500, function() {
            $(".modal-overlay").remove();
        });
    });

  });


- content_for :title_header do
  %h1= t('.sign_up')

.signup-form.centered-section

  - if @community_customization && @community_customization.signup_info_content
    %p
      = @community_customization.signup_info_content.html_safe
  - elsif @current_community.allowed_emails
    %p
      = t('.email_restriction_instructions',
            :community_name => @current_community.name(I18n.locale),
            :allowed_emails => @current_community.allowed_emails,
            :count => (@current_community.allowed_emails.split(",").count))

  - unless !facebook_connect_in_use? || params[:no_fb]
    = render :partial => "layouts/facebook_connect_button", :locals => { :button_text => t(".create_account_with_facebook") }

    .signup-horizontal-line
      .signup-horizontal-line-text=t(".OR")

    %h3=t(".signup_with_email")

  = form_for @person, :url => APP_CONFIG.login_domain.to_s + people_path do |form|

    -# Invite code
    - if @current_community.join_with_invite_only?
      .inline-label-container
        = label_tag :invitation_code, t('.invitation_code'), :class => "inline"
        = link_to(t('common.what_is_this'), "#", :tabindex => "-1", :id => "help_invitation_code_link", :class => "label-info")
      = text_field_tag "invitation_code", nil, :class => :text_field, :maxlength => "20", :value => (params[:code] || "")
    - elsif params[:code]
      = hidden_field_tag "invitation_code", params[:code]

    -# Honey pot: hidden field to detect spammers
    = form.label :input_again, "You should not see this field, if CSS is working. If you see this, please send feedback!", :class => "unwanted_text_field"
    = form.text_field :input_again, :class => "unwanted_text_field", :id => "error_regristration_unwanted_email2", :autocomplete => "off"

    -# Email
    = form.label :email, t('.email')
    = form.text_field :email, :class => :text_field, :maxlenght => "255"

    -# Name
    - if @current_community.only_organizations
      = form.label :organization_name, t('.organization_name')
      = form.text_field :organization_name, :class => :text_field, :maxlength => "30"
    - else
      = form.label :given_name, t('.given_name')
      = form.text_field :given_name, :class => :text_field, :maxlength => "30"
      = form.label :family_name, t('.family_name')
      = form.text_field :family_name, :class => :text_field, :maxlength => "30"

    -# Username
    = form.label :username, username_label
    = form.text_field :username, :class => :text_field, :maxlength => "20", :id => "person_username1"

    -# Company
    = form.label :company, "Company"
    = form.text_field :company, :class => :text_field, :maxlength => "20", :id => "person_company"

    -# Password
    = form.label :password, t('common.password')
    = form.password_field :password, :class => :text_field, :maxlength => "255", :id => "person_password1"
    = form.label :password2, t('.password_again')
    = form.password_field :password2, :class => :text_field, :maxlength => "255"

    -# Subscription
    .row
      %label.radio-inline.subscription-plan
        %input.Preemium{:name => "optradio", :type => "checkbox", :id => "subscription_plan", "data-modal-id" => "popup1"}
          Subscribe
      / %label.radio-inline.subscription-plan
      /   %input#PremiumBasic{:name => "optradio", :type => "radio"}
      /     Premium Basic
      / %label.radio-inline.subscription-plan
      /   %input#PremiumPro{:name => "optradio", :type => "radio"}
      /     Premium Pro
      / %label.radio-inline.subscription-plan
      /   %input#PremiumVIP{:name => "optradio", :type => "radio"}
      /     Premium VIP
    -# Terms
    .outer-checkbox-container
      .checkbox-container
        - unless @skip_terms_checkbox
          %input{:type => "checkbox", :id => "person_terms", :name => "person[terms]"}
          = form.label :terms, t('.i_accept_the'), :class => "checkbox"
          = link_to t(".terms"), "#", :tabindex => "-1", :id => "terms_link", :class => "form"

    = form.hidden_field :consent, :value => @current_community.consent
    = form.hidden_field :subscription_plan_id

    = button_tag t('.create_new_account')

= render :partial => "help_texts", :collection => ["terms", "help_invitation_code"], :as => :field
-#%a.js-open-modal.btn{"data-modal-id" => "popup1", :href => "#"} Pop Up One
#popup1.modal-box{:style => "width:80% !important;margin-top:20%;"}
  %header
    %a.js-modal-close.close{:href => "#"} Ã—
    %h3 EURObizz B2B Marketplace Subscription
  .modal-body
    #pricing-table.clear
      .plan
        %h3
          Subscription
        %a.signup-header Plan Includes
        %ul
          %li
            Amount of Ads
          %li
            Company Profile
          %li
            Video Tutorials
          %li
            Verified Account
          %li
            Review Status
          %li
            Ad Free Use
          %li
            Yearly National Subscriptions Event
          %li
            Access Exclusive Webinars Topspeakers
          %li
            Customized Profile
          %li
            Rotating Ads on Homepage
          %li
            One Office 365 Account
      - @subscription_plan.each do |plan|
        .plan
          %h3
            = plan.name
          = link_to "Select", "javascript:;", :"data-plan"=> plan.id, :class => "signup plan-select"
          %ul
            - plan.subscription_plan_details.each do |plan_detail|
              %li
                = plan_detail.amount_of_ads
              %li
                = plan_detail.company_profile
              %li
                = plan_detail.video_tutorials
              %li
                = plan_detail.verified_account
              %li
                = plan_detail.review_status
              %li
                = plan_detail.ad_free_use
              %li
                = plan_detail.yearly_national_subscriptions_event
              %li
                = plan_detail.access_exclusive_webinars_topspeakers
              %li
                = plan_detail.customized_profile
              %li
                = plan_detail.rotating_ads_on_homepage
              %li
                = plan_detail.one_Office_365_account
                
              
